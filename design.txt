Diretrizes de Design para Modernização do Painel Administrativo Vue.js
Visão Geral
Este documento apresenta diretrizes de design para aprimorar o visual do painel administrativo de gerenciamento de obras, tornando-o mais moderno, amigável e esteticamente agradável, mantendo sua funcionalidade.
Paleta de Cores
Cor Principal

Azul Principal: #3B82F6 (substitui o azul atual)
Azul Escuro: #2563EB (para hover)
Azul Claro: #DBEAFE (para fundos sutis e estados selecionados)

Cores Secundárias

Verde: #10B981 (para ações de sucesso)
Vermelho: #EF4444 (para alertas e exclusões)
Amarelo: #F59E0B (para avisos)
Roxo: #8B5CF6 (para ações secundárias e elementos de destaque)

Cores Neutras

Cinza Escuro: #1F2937 (para textos principais)
Cinza Médio: #6B7280 (para textos secundários)
Cinza Claro: #F9FAFB (para fundos)
Branco: #FFFFFF (para cartões e elementos de interface)

Tipografia
Família de Fontes

Principal: Inter (sem serifa, moderna e altamente legível)
Alternativa: Poppins (para títulos e cabeçalhos)

Tamanhos

Cabeçalhos Principais: 24px-30px (font-weight: 600)
Subtítulos: 18px-20px (font-weight: 500)
Texto Normal: 14px-16px (font-weight: 400)
Texto Secundário: 13px (font-weight: 400)
Micro Texto (legendas): 12px (font-weight: 400)

Espaçamento e Layout
Sistema de Grade

Implementar um sistema de grade baseado em múltiplos de 4px
Pequeno: 4px
Médio: 8px
Grande: 16px
Extra Grande: 24px, 32px

Margens e Preenchimentos

Aumentar espaçamento entre elementos para 16px-24px
Padding de cartões e containers: 24px
Espaçamento entre seções: 32px-48px

Elementos de Interface
Cartões e Containers

Aumentar arredondamento de bordas para 12px (de 8px)
Adicionar sombra sutil: box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)
Adicionar transições suaves em hover: transition: all 0.2s ease-in-out

Botões

Arredondamento mais pronunciado: 8px
Padding interno mais generoso: 12px 20px
Adicionar efeito de escala sutil no hover: transform: translateY(-1px)
Remover bordas em botões preenchidos
Adicionar variante de botão outline e ghost

.btn {
  border-radius: 8px;
  padding: 12px 20px;
  font-weight: 500;
  transition: all 0.2s;
}

.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.btn-ghost {
  background: transparent;
  color: var(--color-primary);
}

.btn-ghost:hover {
  background: var(--color-primary-light);
}

Campos de Formulário

Aumentar altura de inputs para 44px
Arredondamento de 8px nas bordas
Estado de foco mais visível com cor principal
Adicionar autofill styles para melhor experiência
Espaçamento entre elementos de formulário: 24px

.form-input {
  height: 44px;
  border-radius: 8px;
  padding: 0 16px;
  border: 1px solid #E5E7EB;
  transition: all 0.2s;
}

.form-input:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
}

Tabelas

Remover bordas verticais
Adicionar linhas horizontais mais sutis: border-bottom: 1px solid #F3F4F6
Aumentar espaçamento entre linhas (td padding: 16px)
Adicionar hover state mais visível: background-color: #F9FAFB
Cabeçalhos de tabela com fundo levemente contrastante

table {
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}

thead th {
  background-color: #F9FAFB;
  color: #4B5563;
  font-weight: 500;
  text-transform: none;
  letter-spacing: 0;
  padding: 12px 16px;
}

tbody tr {
  transition: background-color 0.15s;
}

tbody tr:hover {
  background-color: #F3F4F6;
}

td {
  padding: 16px;
  vertical-align: middle;
  border-bottom: 1px solid #F3F4F6;
}

Paginação

Design mais moderno com botões circulares para números
Estado ativo com background da cor principal
Botões anterior/próximo com ícones mais modernos

.pagination-item {
  min-width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 4px;
  font-weight: 500;
}

.pagination-item.active {
  background-color: var(--color-primary);
  color: white;
}

Componentes Específicos
Barra de Navegação

Aumentar altura para 72px
Logo mais proeminente
Indicador de navegação ativa mais visível
Adicionar leve sombra para separação visual

Filtros e Ações

Design de cartão elevado para seção de filtros
Agrupar campos relacionados visualmente
Botões de ação com ícones para melhor compreensão visual

Modais

Centro do modal com mais espaço de respiro (padding: 32px)
Overlay mais escuro para melhor contraste
Animação suave de entrada e saída

.modal {
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

.modal-overlay {
  background-color: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
}

.modal-enter-active, .modal-leave-active {
  transition: all 0.3s;
}

.modal-enter-from, .modal-leave-to {
  opacity: 0;
  transform: scale(0.95);
}

Microinterações e Animações
Transições

Adicionar transições suaves a todas as interações (0.2s-0.3s)
Usar timing functions adequadas: cubic-bezier(0.4, 0, 0.2, 1)
Animar mudanças de estado (hover, active, focus)

Estados de Loading

Substituir texto "Carregando..." por skeleton loaders
Implementar transições suaves entre estados
Adicionar animações sutis para indicar progresso

.skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: skeleton-loading 1.5s infinite;
}

@keyframes skeleton-loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

Notificações e Feedback
Mensagens de Status

Toast notifications para feedback de ações
Cores distintas por tipo (sucesso, erro, informação)
Posição consistente (canto superior direito)
Animação de entrada e saída suave

Indicadores de Progresso

Barras de progresso para operações mais longas
Spinners sutis para carregamentos curtos
Feedback visual imediato após ações do usuário

Responsividade
Breakpoints

Mobile: < 640px
Tablet: 640px - 1024px
Desktop: > 1024px

Adaptações Mobile

Menu colapsável com ícone hamburger
Tabelas com rolagem horizontal ou apresentação em cards
Campos de formulário em largura total
Botões de ação flutuantes para economizar espaço

Melhoria de Acessibilidade
Contraste

Garantir contraste WCAG AA entre texto e fundo
Textos principais: contraste mínimo 4.5:1
Textos grandes/cabeçalhos: contraste mínimo 3:1

Estados de Foco

Estado de foco visível e distinto em todos os elementos interativos
Usar outline ou outros indicadores visuais claros

Tamanhos Alvos de Toque

Botões e áreas clicáveis com no mínimo 44px x 44px
Espaçamentos adequados entre elementos clicáveis em mobile

Exemplos de Implementação
Componente AppButton Atualizado

<template>
  <button
    :class="[
      'rounded-lg font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-opacity-50 relative overflow-hidden',
      sizeClasses,
      variantClasses,
      { 'opacity-60 cursor-not-allowed': disabled },
      { 'inline-flex items-center justify-center': icon || iconRight },
    ]"
    :disabled="disabled"
    v-bind="$attrs"
  >
    <span class="relative z-10 flex items-center">
      <span v-if="icon" class="mr-2">
        <slot name="icon"></slot>
      </span>
      <slot></slot>
      <span v-if="iconRight" class="ml-2">
        <slot name="icon-right"></slot>
      </span>
    </span>
  </button>
</template>

<script setup lang="ts">
import { computed } from 'vue';

interface Props {
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'ghost' | 'outline';
  size?: 'xs' | 'sm' | 'md' | 'lg';
  disabled?: boolean;
  icon?: boolean;
  iconRight?: boolean;
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'primary',
  size: 'md',
  disabled: false,
  icon: false,
  iconRight: false
});

const variantClasses = computed(() => {
  const variants = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500 hover:shadow-md hover:-translate-y-0.5',
    secondary: 'bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500 hover:shadow-md hover:-translate-y-0.5',
    success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-500 hover:shadow-md hover:-translate-y-0.5',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500 hover:shadow-md hover:-translate-y-0.5',
    warning: 'bg-yellow-500 hover:bg-yellow-600 text-white focus:ring-yellow-400 hover:shadow-md hover:-translate-y-0.5',
    info: 'bg-indigo-600 hover:bg-indigo-700 text-white focus:ring-indigo-500 hover:shadow-md hover:-translate-y-0.5',
    ghost: 'bg-transparent hover:bg-gray-100 text-gray-700 focus:ring-gray-300',
    outline: 'bg-transparent border border-blue-600 text-blue-600 hover:bg-blue-50 focus:ring-blue-300'
  };
  return variants[props.variant];
});

const sizeClasses = computed(() => {
  const sizes = {
    xs: 'text-xs px-2 py-1',
    sm: 'text-sm px-3 py-1.5',
    md: 'text-base px-4 py-2.5',
    lg: 'text-lg px-6 py-3'
  };
  return sizes[props.size];
});
</script>

Componente AppInput Atualizado
<template>
  <div class="mb-6">
    <label v-if="label" :for="id" class="block text-gray-700 font-medium mb-2 text-sm">
      {{ label }} <span v-if="required" class="text-red-500">*</span>
    </label>
    <div class="relative">
      <span v-if="icon" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">
        <slot name="icon"></slot>
      </span>
      <input
        :id="id"
        :type="type"
        :value="modelValue"
        @input="$emit('update:modelValue', ($event.target as HTMLInputElement).value)"
        :placeholder="placeholder"
        :required="required"
        :disabled="disabled"
        :class="[
          'w-full rounded-lg border shadow-sm transition-all duration-200 h-11 bg-white',
          icon ? 'pl-10' : 'pl-4',
          error ? 'border-red-500 focus:border-red-500 focus:ring-red-200' : 'border-gray-300 focus:border-blue-500 focus:ring-blue-200',
          'focus:outline-none focus:ring-4',
          { 'bg-gray-100 cursor-not-allowed': disabled }
        ]"
        v-bind="$attrs"
      />
    </div>
    <p v-if="error" class="mt-2 text-sm text-red-600">{{ error }}</p>
    <p v-else-if="helpText" class="mt-2 text-sm text-gray-500">{{ helpText }}</p>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';

interface Props {
  modelValue: string | number;
  label?: string;
  type?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  helpText?: string;
  id?: string;
  icon?: boolean;
}

const props = withDefaults(defineProps<Props>(), {
  type: 'text',
  placeholder: '',
  required: false,
  disabled: false,
  error: '',
  helpText: '',
  id: () => `input-${Math.random().toString(36).substring(2, 9)}`,
  icon: false
});

defineEmits(['update:modelValue']);
</script>

Implementação Recomendada

Crie um arquivo de tokens de design para facilitar a manutenção
Atualize os componentes base (button, input, card) antes de aplicar estilos específicos de página
Aplique mudanças incrementais para testar e validar a nova aparência
Implemente responsividade desde o início do processo de redesign
Utilize classes de utilidade consistentes do Tailwind para manter coesão visual

Este documento serve como guia para elevar o design do painel administrativo, transformando-o em uma interface mais moderna e amigável, mantendo a funcionalidade existente.